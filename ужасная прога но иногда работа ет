#include <iostream>
#include <string>
#include <cstring>
#include <sstream>
#include <stdlib.h>
#include<stdio.h>
#include<time.h>
#include<math.h>
#include <bitset>

using namespace std;

#define MAX 20
#define BUCKET_LIMIT 1000000000
#define BUCKET_NUM_DIGITS 9

class BigInt	{
	private:
		long long content[MAX];
		short sign;
		unsigned short length;

		void addLSBucket(int);

	public:
        BigInt ();
		BigInt (long long);
		BigInt (string,int);
		BigInt (const BigInt &n);

		BigInt operator = (BigInt);
		BigInt operator = (long long);

		bool operator == (BigInt);
		bool operator == (long long);
		bool operator != (BigInt);
		bool operator != (int);
		bool operator < (BigInt);
		bool operator < (int);
		bool operator <= (BigInt);
		bool operator <= (int);
		bool operator > (BigInt);
		bool operator > (int);
		bool operator >= (BigInt);
		bool operator >= (int);

		BigInt operator + (long long);
		BigInt operator + (BigInt);
		BigInt operator - (long long);
		BigInt operator - (BigInt);
		BigInt operator * (long long);
		BigInt operator * (BigInt);
		BigInt operator / (long long);
		BigInt operator / (BigInt);
		BigInt operator % (long long);
		BigInt operator % (BigInt);


		string toString(void);
		void debug(void);
};

BigInt :: BigInt ()	{
	length = 0;
	sign = 0;
	memset(content, 0, sizeof(content));
}

BigInt :: BigInt (long long n)	{
	length = 0;

	if (n == 0)	{
		sign = 0;
	}
	else	{
		sign = (n > 0) ? 1 : -1;
		if (n < 0)	n = 0 - n;		// Removing minus sign

		for (int i = 0; n > 0; n /= BUCKET_LIMIT)	{
			length ++;
			content[i ++] = n % BUCKET_LIMIT;
		}
	}
	memset(content + length, 0, (MAX - length) * sizeof(long long));
}

BigInt :: BigInt (string n, int size)	{
	length = 0;
		int i, posFirstDigit;
		stringstream s;

		if (n[0] == '-')	{
			sign = -1;
			posFirstDigit = 1;
		}
		else	{
			sign = 1;
			posFirstDigit = 0;
		}
		for (i = size - BUCKET_NUM_DIGITS; i >= posFirstDigit; i -= 9)	{

			s << n.substr(i, BUCKET_NUM_DIGITS);
			s >> content[length ++];
			s.clear();
		}
		if (i < posFirstDigit)	{
			s << n.substr(posFirstDigit, BUCKET_NUM_DIGITS - posFirstDigit + i);
			s >> content[length ++];
		}
		memset(content + length, 0, (MAX - length) * sizeof(long long));
}

BigInt :: BigInt (const BigInt &n)	{
	length = n.length;
	sign = n.sign;
	memcpy(content, n.content, MAX * sizeof(long long));
}

void BigInt :: addLSBucket (int numBucketsToBeAdded)	{

	if (length + numBucketsToBeAdded > MAX)	return;

	for (int i = length + numBucketsToBeAdded -1; i >= 0; i --)	{
		content[i] = (i > numBucketsToBeAdded - 1) ? content[i - numBucketsToBeAdded] : 0;
	}
	length += numBucketsToBeAdded;
}

string BigInt :: toString(void)	{
	if (length == 0)	return "0";

	stringstream s;

	if (sign == -1)	s << "-";

	s << content[length - 1];

	for (int i = length - 2; i >= 0; i --)	{
		if (content[i] < 10)	{
			s << "00000000" << content[i];
		}
		else if (content[i] < 100)	{
			s << "0000000" << content[i];
		}
		else if (content[i] < 1000)	{
			s << "000000" << content[i];
		}
		else if (content[i] < 10000)	{
			s << "00000" << content[i];
		}
		else if (content[i] < 100000)	{
			s << "0000" << content[i];
		}
		else if (content[i] < 1000000)	{
			s << "000" << content[i];
		}
		else if (content[i] < 10000000)	{
			s << "00" << content[i];
		}
		else if (content[i] < 100000000)	{
			s << "0" << content[i];
		}
		else	{
			s << content[i];
		}
	}
	return s.str();
}

BigInt BigInt :: operator = (BigInt n)	{
	sign = n.sign;
	length = n.length;
	memcpy(content, n.content, sizeof(content));
}

BigInt BigInt :: operator = (long long m)	{
    BigInt n(m);
	sign = n.sign;
	length = n.length;
	memcpy(content, n.content, sizeof(content));
}

bool BigInt :: operator == (long long n)	{
    BigInt k (n);
    if ((*this) == k)
        return true;
    else
        return false;
}

bool BigInt :: operator == (BigInt n)	{
		for (int i = 0; i < length; i ++)	{
			if (content[i] != n.content[i])	return false;
		}
		return true;
}

bool BigInt :: operator != (BigInt n)	{
	return !operator == (n);
}

bool BigInt :: operator != (int n)	{
    BigInt Y  (n);
	return !operator == (Y);
}

bool BigInt :: operator < (BigInt n)	{
	if (sign < n.sign)	{
		return true;
	}
	else if (sign > n.sign)	{
		return false;
	}
	else if (sign == 0)	{
		return false;
	}
	else if (sign == 1 && length < n.length)	{
		return true;
	}
	else if (sign == 1 && length > n.length)	{
		return false;
	}
	else if (sign == 1 && length == n.length)	{
		for (int i = 0; i < length; i ++)	{
			if (content[i] < n.content[i])	{
				return true;
			}
			else if (content[i] > n.content[i])	{
				return false;
			}
		}
		return false;
	}
	else if (sign == -1 && length < n.length)	{
		return false;
	}
	else if (sign == -1 && length > n.length)	{
		return true;
	}
	else if (sign == -1 && length == n.length)	{
		for (int i = 0; i < length; i ++)	{
			if (content[i] < n.content[i])	{
				return false;
			}
			else if (content[i] > n.content[i])	{
				return true;
			}
		}
		return false;
	}
}

bool BigInt :: operator < (int N)	{
    BigInt n(N);
	return (operator < (n) || operator == (n));
}

bool BigInt :: operator <= (BigInt n)	{
	return (operator < (n) || operator == (n));
}

bool BigInt :: operator > (int n)	{
    BigInt N(n);
	return !operator <= (N);
}

bool BigInt :: operator > (BigInt n)	{
	return !operator <= (n);
}

bool BigInt :: operator >= (BigInt n)	{
	return !operator < (n);
}

bool BigInt :: operator >= ( int n)	{
    BigInt N(n);
	return !operator < (N);
}

BigInt BigInt :: operator + (BigInt n)	{

	if (length == 0)	{
		return n;
	}
	else if (n.length == 0)	{
		BigInt num(*this);
		return num;
	}
	else if (sign == n.sign)	{
		BigInt num;
		num.length = (length > n.length) ? length : n.length;
		num.sign = sign;

		long long bucketSum, carry = 0;

		for (int i = 0; i < num.length; i ++)	{
			bucketSum = content[i] + n.content[i] + carry;
			num.content[i] = bucketSum % BUCKET_LIMIT;
			carry = bucketSum / BUCKET_LIMIT;
		}
		if (carry > 0)	{
			num.content[length ++] = carry;
		}
		return num;
	}
	else	{
		BigInt num;
		if (sign == -1)	{
			num = (*this);
			num.sign = 1;
			return n - num;
		}
		else	{
			num = n;
			num.sign = 1;
			return (*this) - num;
		}
	}
}

BigInt BigInt :: operator + (long long n)	{
	return (*this) + BigInt(n);
}

BigInt BigInt :: operator - (BigInt n)	{

	if (sign == n.sign)	{
		bool hasZeroValue = true;

		if (length == 0)	{
			BigInt subtrahend(n);
			subtrahend.sign *= -1;
		}
		else if (n.length == 0)	{
			BigInt num(*this);
			return num;
		}
		if (*this > n)	{
			BigInt minuend(*this);

			for (int i = 0; i < minuend.length; i ++)	{
				if (minuend.content[i] >= n.content[i])	{
					minuend.content[i] -= n.content[i];
				}
				else	{
					minuend.content[i] = 10 * minuend.content[i] - n.content[i];
					minuend.content[i + 1] --;
				}
				if (hasZeroValue && minuend.content[i] != 0)	hasZeroValue = false;
			}
			return hasZeroValue ? BigInt(0) : minuend;
		}
		else	{
			BigInt minuend(n);
			for (int i = 0; i < minuend.length; i ++)	{
				if (minuend.content[i] >= content[i])	{
					minuend.content[i] -= content[i];
				}
				else	{
					minuend.content[i] = 10 * n.content[i] - content[i];
					minuend.content[i + 1] --;
				}
				if (hasZeroValue && minuend.content[i] != 0)	hasZeroValue = false;
			}
			if (hasZeroValue)	{
				return BigInt(0);
			}
			else	{
				minuend.sign *= -1;
				return minuend;
			}
		}
	}
	else	{
		BigInt subtrahend(n);
		if (n.sign = -1)	{
			subtrahend.sign = 1;
		}
		else	{
			subtrahend.sign = -1;
		}
		return operator + (subtrahend);
	}
}

BigInt BigInt :: operator - (long long n)	{
	return (*this) - BigInt(n);
}

BigInt BigInt :: operator * (long long n)	{
	if (n == 0 || length == 0)	return BigInt(0);

	long long carry = 0, tempProduct;
	BigInt num(*this);
	num.sign = ((n > 0 && sign == 1) || (n < 0 && sign == -1)) ? 1 : -1;

	for (int i = 0; i < length; i ++)	{
		tempProduct = num.content[i] * n;
		num.content[i] = (tempProduct + carry) % BUCKET_LIMIT;
		carry = (tempProduct + carry) / BUCKET_LIMIT;
	}

	if (carry > 0)	num.content[num.length ++] = carry;
	return num;
}

BigInt BigInt :: operator * (BigInt n)	{

	BigInt rs, temp;
	rs = n * content[0];

	for (int i = 1; i < length; i ++)	{
		temp = n * content[i];
		temp.addLSBucket(i);
		rs = rs + temp;
	}
	rs.sign = (sign == n.sign) ? 1 : -1;
	return rs;
}

BigInt BigInt :: operator % (long long n)	{
	if (n == 0 || length == 0)	return BigInt(0);

	long long carry = 0, tempProduct;
	BigInt num(*this);

	for (int i = 0; i < length; i ++)	{
		tempProduct = num.content[i] % n;
		num.content[i] = (tempProduct + carry) % BUCKET_LIMIT;
		carry = (tempProduct + carry) / BUCKET_LIMIT;
	}

	if (carry > 0)	num.content[num.length ++] = carry;
	return num;
}

BigInt BigInt :: operator % (BigInt n){
	BigInt rs, temp;
	BigInt num(*this);
	rs = num % n.content[0];
	for (int i = 1; i < length; i ++)	{
		temp = num % content[i];
		temp.addLSBucket(i);
		rs = rs - temp;
	}
	return rs;
}

BigInt BigInt :: operator / (long long n)	{
	if (n == 0 || length == 0)	return BigInt(0);

	long long carry = 0, tempProduct;
	BigInt num(*this);

	for (int i = 0; i < length; i ++)	{
        tempProduct = num.content[i] / n;
		num.content[i] = (tempProduct + carry) % BUCKET_LIMIT;
		carry = (tempProduct + carry) / BUCKET_LIMIT;
	}
	if (carry > 0)	num.content[num.length ++] = carry;
	return num;
}

BigInt BigInt :: operator / (BigInt n)	{
	BigInt rs, temp;
	BigInt num(*this);
	rs = num / n.content[0];
	for (int i = 1; i < length; i ++)	{
		temp = num / content[i];
		temp.addLSBucket(i);
		rs = rs - temp;
	}
	return rs;
}



    BigInt fust(BigInt d, BigInt y, BigInt n){ //вспомогательная функция к следующей
        BigInt ar[(y.toString()).size()];
        int i = 0;
        while (y >= 10){ // поразрядное разложение BigInt-числа
            ar[i] = y % 10;
            y = y / 10;
            i++;
            }
        ar[i] = y % 10;
        i++;
        BigInt mas [i];
        for(int j = 0; j < i; j++){
            char e[j];
            e[0] = '1';
            for(int k = 1; k <= j; k++)
                    e[k]= '0';

            mas[j] = (d * ar[j]) % n;
            int y = j + 1;
            BigInt ch(e, j+1);
            ch = ch % n;
            if (j != 0){
                BigInt cop = ch;
                BigInt t = 2;
                BigInt On (1);
                while(t*t < cop || ch != On){
                    if (ch % t == 0)
                        while(ch % t == 0){
                            mas[j] = mas[j] * t % n;
                            ch = ch / t;
                    }
                t = t + 1;
                }
            }
            else
                mas[j] = (mas[j] * 1) % n;
        }
        y = 0;
        for(int j = 0; j < i; j++)
            y = (y + mas[j]) % n;
        return y;
    }

    BigInt step (BigInt a, BigInt k, BigInt n){ //возведение в степень по модулю
        if (k == 0)
            return 1;
        else{
            if( k % 2 == 0){
                BigInt d = step(a, k / 2, n);
                BigInt On(1);
                BigInt temp = d;
                BigInt cop = d;
                BigInt i = 2;
               if(i*i < cop || temp != On){
                    if (temp % i == 0) //разложение числа на простые делители
                        while(temp % i == 0){
                            if(i < 1000 && d < 10000)
                                d = (d * i) % n;
                            else
                            d = fust(d, i, n); //поразрядное умножение больших чисел
                            temp = temp / i;
                        }
                i  = i + 1;
                }
            d = fust (d,temp,n); // для последнего делителя
            return d;
            }
            else{
                BigInt l = step (a, k-1, n);
                BigInt cop = l;
                BigInt y = a;
                BigInt i = 2;
                BigInt On(1);

                while(i*i < cop || l != On){
                    if (l % i == 0)

                        while(l % i == 0){
                            if(i < 1000 && y < 10000)
                                y = (y * i) % n;
                            else
                                y = fust(y,i,n); //поразрядное умножение больших чисел
                            l = l / i;
                }
            i = i + 1;
            }
            return y;
            }
        }
    }

    BigInt binpow (BigInt a, int n) { //бинарное возведение в степень BigInt - числа
      if (n == 0) return 1;
      if (n % 2 == 1) return binpow (a, n-1) * a;
       else {
         BigInt b = binpow (a, n/2);
         return b * b;
      }
    }

    BigInt extended_euclid(BigInt b,BigInt a){ //функция нахождения секретной экспоненты методом расширенного алгоритма Евклида
        BigInt y(0);
        BigInt Zero(0);
        BigInt e = b;
        BigInt n = a;
        if ((a + 1) % b == Zero){
            y = (a + 1) / b;
            return y;
        }

        else{
            long long int sign = -1;
            BigInt x, q, r, x1(0), x2(1), y1(1), y2(0);
            while (b != Zero){
                q = a / b;
                r = a - q * b;;
                x = x2 +  q * x1 * sign ;
                y = y2 +  y1 * q * sign;
                a = b;
                b = r;
                x2 = x1;
                x1 = x;
                y2 = y1;
                y1 = y;
            }
            y = y2;
        }
        if (y < 0)
            y = n - y;
        return y;
    }

    void CharToBool(char* ar, bool* a){ //перевод символов в двоичный код
        int binary = 0, j = 0;
        int c;
        for (int i = 0; ar[i] != NULL; i++){
                  c = ar[i];
                  if  (c < 0)
                    c = c + 256;

            for (int power = 7; power + 1; power-- ){
                if( c >= (1 << power) ){
                    c -= (1 << power);
                    a[j] = 1;
                    j++;
                }
                else{
                    a[j] = 0;
                    j++;
                    }
                    }
           }
    }

    BigInt binarytodec(bool* mass, int size){//перевод двоичного числа в BigInt - число
        BigInt B;// число = кол-во нулей -> 0-разделитель -> само число в десятичном представлении
        BigInt A(2);
        BigInt C(0);
        BigInt G(10);

        long long int k = 0;
        long long int f = size - 1;
        for (int i = 0; i < size; i++){//подсчет количества нулей вначале двоичного числа
            if (mass[0] == false && i == 0){
                while(mass [k] == false)
                    k++;
                i = k;
            }
            if(mass[i] == true){//перевод числа после нулей в десятичный вид
                C = binpow(A, f - i);
                B = B + C;
                //C = D;
            }
        }

        if(k == size){ //если все число состоит из нулей, то вернется десятичное число такое что первый его разряд - количество нулей, а далеее кол-во 0 + 1
             B = (binpow(G,size + 1))*size;
             return B;
        }

        int o = 0, h = 0; //кол-во чисел в числе
        o = (B.toString()).size();
        int ds = o;

        int numb[o];
        numb[0] = ds % 10;
        while(ds >= 10){//запись количества знаков в полученном десятичном числе в массив
            h++;
            numb [h] = ds/10;
            ds /= 10;
        }
        h++;

        char zero[o+2]; //массив заполненный нулями
        zero[0] = 1;
        for(int i = 1; i < o + 2; i++)
            zero[i] = '0';


        char newnew[o + 2 + h]; //запись символов в один массив
        if(k != 0)
            newnew[0] = k + '0';
        else
            newnew[0] = '9';
        for(int i = h - 1, j = 1; i > 0, j <= h; i--, j++)
            newnew[j] = numb[i]+ '0';
        for(int i = h + 1,j = 1; i < o+2, j<o+2; i++,j++)
            newnew[i]= zero[j];

        BigInt ST (newnew, o + 2 + h); //само число
            B = ST + B;

      return B;
    }

    void intobool (int gty, bool* bulb, int z){ //функция перевода int значениями не из таблицы ASCII (чтобы не переводить каждый раз)
        int j = z;
        if (gty==0){
                bulb [j] = 0; bulb[j+1] = 0; bulb[j+2] = 0; bulb[j+3] = 0;
            }
        if (gty == 1){
                bulb [j] = 0; bulb[j+1] = 0; bulb[j+2] = 0; bulb[j+3] = 1;
            }
        if (gty==2) {
                bulb [j] = 0; bulb[j+1] = 0; bulb[j+2] = 1; bulb[j+3] = 0;
            }
        if (gty==3){
                bulb [j] = 0; bulb[j+1] = 0; bulb[j+2] = 1; bulb[j+3] = 1;
            }
        if (gty==4) {
                bulb [j] = 0; bulb[j+1] = 1; bulb[j+2] = 0; bulb[j+3] = 0;
            }
        if (gty==5) {
                bulb [j] = 0; bulb[j+1] = 1; bulb[j+2] = 0; bulb[j+3] = 1;
            }
        if (gty==6) {
                bulb [j] = 0; bulb[j+1] = 1; bulb[j+2] = 1; bulb[j+3] = 0;
            }
        if (gty==7) {
                bulb [j] = 0; bulb[j+1] = 1; bulb[j+2] = 1; bulb[j+3] = 1;
            }
        if (gty==8){
                bulb [j] = 1; bulb[j+1] = 0; bulb[j+2] = 0; bulb[j+3] = 0;
            }
        if (gty==9) {
                bulb [j] = 1; bulb[j+1] = 0; bulb[j+2] = 0; bulb[j+3] = 1;
            }
        }

    int booltoint (bool x, bool y, bool z,bool a){ //функция обратная предыдущей
            int gty;
            if (x == 0)
                if (y == 0)
                    if (z == 0)
                        if (a == 0)
                            gty = 0;
                        else
                            gty = 1;
                    else
                        if (a == 0)
                            gty = 2;
                        else
                            gty = 3;
                else
                    if (z == 0)
                        if (a == 0)
                            gty = 4;
                        else
                            gty = 5;
                    else
                        if (a == 0)
                            gty = 6;
                        else
                            gty = 7;
            else
                if (y == 0)
                    if (z == 0)
                        if (a == 0)
                            gty = 8;
                        else
                            gty = 9;
            return gty;
        }

    void randomizer(bool* a, BigInt* A, int grouppes, int s){ //разбить символы на рандомные группы
    long long int everyone [grouppes]; // массив содержащий кол-во элементов  в каждой группе
    int kol = s; // переменная, определяющая сколько элементов осталось распределить
        for (int i = 0; i < grouppes - 1; i++){ // цикл, определяющий количество элементов в группе
            if(kol >= 0){
                everyone[i] = 2 + rand()% 5;
                kol -= everyone [i];
            }
            else
                grouppes = i;
        }
        if (kol >= 0)
            everyone [grouppes - 1] = kol;
        else
            everyone [grouppes - 1] = 0;
    int z = 0;
    for (int i = 0; i < grouppes; i++){
            bool newmas[everyone [i]];
            for(int j = 0; j < everyone[i]; j++){
                    if(a[j + z] == true)
                        newmas[j] = 1;
                    else
                        newmas[j] = 0;
            }
        A[i] = binarytodec(newmas, everyone[i]);
        z += everyone[i];
    }
    }

    string chartosymbol(string MAIN){
    stringstream sstream(MAIN);
    string output;
    while(sstream.good()){
        bitset<8> bits;
        sstream >> bits;
        char c = char(bits.to_ulong());
        output += c;
    }
    return output;
}
    string Encoder(BigInt* A, int grouppes, BigInt e, BigInt n){
        cout << endl << "Encrypted message: "<< endl;
        int kovi = 0;
        BigInt c;
        int numb = 0;
        string main; //строка содержащая зашифрованные числа и размер вначале
        for (int i = 0; i < grouppes; i++){  //шифровка
            c = step (A[i], e,n);
            if(c != 0){
                BigInt NN((c.toString()).size());
                string ss = NN.toString() + c.toString();
                main = main + ss;
            }
        }
        numb = main.size();//размер строки

        bool bulb[numb*4 + numb];
        int v = 0;
        while(numb > 0){//рандомное распределение флагов
            int h;
                if(numb > 9)
                    h = 1 + rand() %9;
                else
                    h = 1 + rand() % numb;
                int gty[h];
                gty[0] = h;
                intobool(gty[0], bulb, kovi);
                kovi = kovi + 4;
                for (int i = 1 ; i < h + 1; i++){
                    gty[i]= main[i + v - 1]- '0';
                    intobool(gty[i], bulb, kovi);
                    kovi = kovi + 4;
                }
            numb = numb - h;
            v = v + h;
        }
        intobool(0, bulb, kovi);//перевод десятичного массива в "bool"
            kovi = kovi + 4;

        int w = 0;
        if (numb < 0){
            w = 0 - numb;
            kovi = kovi - w*4;
        }
        string MAIN;
        char schifr [kovi];

        for(int i = 0; i < kovi; i++){
            if (bulb[i] == 0)
                schifr[i] = '0';
            else
                schifr[i] = '1';
            MAIN = MAIN + schifr[i];
    }
        string h = chartosymbol(MAIN);
        return h;
    }

    string Decoder(string input, BigInt x, BigInt n){
        cout << endl << "Decrypted message: "<< endl;
    char alpha[input.size()];
    for(int i = 0; i < input.size(); i++)
        alpha[i] = input[i];

    bool sdds[input.size()*8];
    CharToBool(alpha, sdds);

    int number = 2 * input.size();
    int sdf[number];//десятичный массив
    int zx = 0;
        for(int i = 0; i < number; i++){
            sdf[i] = booltoint(sdds[zx], sdds[zx+1], sdds[zx+2], sdds[zx+3]);
            zx = zx + 4;
        }//перевод из бинарного вида в десятичный
    int f[number];
    int zd = 0;
    int r[number];

    for(int i = 0; i<= number; i++){
        r[i] = 0;
        f[i] = 0;
    }

    int yu = 0;
    int flag =sdf[0];
    int j = 0;
    while(flag != 0 && flag <= 9){ //удаление элементов-флагов
        flag = sdf[zd];
        for(int i = 0; i < flag; i++){
            if(i <= 9){
            f[i + j] = sdf[i + j + 1];
            r[yu]=f[i+j];
            yu++;
            zd++;
            }
            else
                break;
        }
    zd++;
    j = zd;
    }

    zd = 0;
    int wer[yu];
    int rt[yu];
    for(int i = 0;i <= yu; i++){
        wer[i]= 0;
    }
    flag = r[0];
    int stop = 0;
    BigInt Des[yu];
    for(int j = 0; j < yu; j++){
        if(flag!=0){
            flag = r[zd];
            int qw = 0;
            char rt[flag];
            for(int i = 0; i < flag; i++){
                wer[i + j] = r[i + j + 1];
                rt[qw]=wer[i+j] + '0';
                qw++;
                zd++;
            }
            BigInt temp(rt,flag);
            Des[stop] = temp;
            zd = zd +1;
            j = zd- 1;
            stop++;
        }
        else
            break;
    }


   string maimamim;
    for (int i = 0; i < stop; i++){ //дешифровка
            BigInt c = step (Des[i], x, n);
            BigInt h[(c.toString()).size()];
            BigInt temp = c;
            int yw = (c.toString()).size();
            while(c >= 10){
                h[yw] = c % 10;
                c = c / 10;
                yw--;
            }
            yw--;
            h[yw] = c % 10; //

            string newnewnnw;
            BigInt g(0);
            int j = 0;
            if(h[0] != 9){
                for(j = 0; h[0] > j; j++)
                    newnewnnw[j]= '0';
            }
            else
                j = 0;

            int ert = 0;
            for (int  y = (temp.toString()).size(); y > 2; y--){
                g = g + h[y]*pow(10,ert);
                ert++;
            }
            BigInt temp2 = g;
            int kol = j;
            while(temp2 >= 1){
                    temp2 = temp2 / 2;
                    kol++;
                }
            int AAAA = kol;
            while(kol != j){
                if (g % 2 == 0){
                    newnewnnw[kol-1] = '0';
                    g = g / 2;
                    kol--;
                }
                else{
                    newnewnnw [kol-1] = '1';
                    g = g / 2;
                    kol--;
                }
            }
            int uy = 0;
            while(uy < AAAA){
                maimamim = maimamim + newnewnnw[uy];
                uy++;
            }
        }

    return chartosymbol(maimamim);
    }

    int main(){

    char ar[] = "TOP_secret";
    int size = strlen(ar) + 1; //подсчет количества символов в char-массиве без учета '/0'
    cout << ar << endl;


    int s = size*8; //s - количество символов в бинарном массиве
    bool a[s]; // бинарный массив

    CharToBool(ar, a);

    srand(time(NULL));
    int grouppes = s/6 + rand() % s/6; // количество групп элементов не больше чем кол-во символов в массиве //можно брать в пределах 37

    BigInt A[grouppes];
    randomizer(a, A, grouppes, s);
    BigInt p(1151),q(1013);
    /*cout << "Enter p,q ";
    cin >> p >> q;*/

    BigInt n = p * q; //n сложно подобрать
    BigInt func = (p-1) * (q-1);  //функция Эйлера (подсчет взаимно простых чисел с n), должна быть больше, чем само вводимое число
    /*cout << "Enter public exponent " << '1' << " < e < " << func;*/
    BigInt e(3);
    //cin >> e; е-открытая экспонента- простое + взаимно простое с ф.Эйлера (например из  чисел ферма)
    BigInt x;
    x = extended_euclid(e,func);

    cout << "Public key {" << e.toString() << "," << n.toString() << "}" << endl;
    cout << "Private key {" << x.toString() << "," << n.toString() << "}" << endl << endl;

    string input = Encoder(A, grouppes, e, n);
    cout << input << endl;

    string output = Decoder (input, x, n);
    cout << output;
    return 0;
    }




    /*cout << " Enter size of: ";
    int ss;
    cin >> ss;
    char ar[ss];
    cout << " enter your sms: ";
    cin >> ar;*/
