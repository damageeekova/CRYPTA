#include <iostream>
#include <string>
#include <cstring>
#include <sstream>
#include <stdlib.h>
#include<stdio.h>
#include<time.h>
#include<math.h>

using namespace std;

#define MAX 20					// Max. number of buckets. Default 20 buckets (max 20*9 digits).
#define BUCKET_LIMIT 1000000000			// 999999999 is the highest possible number in a single bucket
#define BUCKET_NUM_DIGITS 9			// Max. number of digits of in one bucket

class BigInt	{
	private:
		long long content[MAX];		// Buckets holding actual number
		short sign;			// -1/0/1; depending on number being negetive, zero r positive respectively
		unsigned short length;		// Number of buckets actually utilized to hold the number

		void addLSBucket(int);		// Add Least Significant Buckets: Internally used in multiplication operation

	public:
		// Constructors
		BigInt ();
		BigInt (long long);
		BigInt (string);
		BigInt (const BigInt &n);

		// Assignment Operators
		BigInt operator = (BigInt);
		BigInt operator = (long long);	// TODO

		// Comparison operators
		bool operator == (BigInt);
		bool operator == (long long);	// TODO
		bool operator != (BigInt);
		bool operator != (int);		// TODO
		bool operator < (BigInt);
		bool operator < (int);		// TODO
		bool operator <= (BigInt);
		bool operator <= (int);		// TODO
		bool operator > (BigInt);
		bool operator > (int);		// TODO
		bool operator >= (BigInt);
		bool operator >= (int);		// TODO

		// Arithmetic operators
		BigInt operator + (long long);
		BigInt operator + (BigInt);
		BigInt operator - (long long);
		BigInt operator - (BigInt);
		BigInt operator * (long long);
		BigInt operator * (BigInt);
		BigInt operator / (long long);	// TODO
		BigInt operator / (BigInt);	// TODO
		BigInt operator % (long long);	// TODO
		BigInt operator % (BigInt);	// TODO

		// Methods
		string toString(void);		// Serializes BigInt object
		void debug(void);
};

BigInt :: BigInt ()	{
	length = 0;
	sign = 0;
	memset(content, 0, sizeof(content));
}

BigInt :: BigInt (long long n)	{
	length = 0;

	if (n == 0)	{
		sign = 0;
	}
	else	{
		sign = (n > 0) ? 1 : -1;
		if (n < 0)	n = 0 - n;		// Removing minus sign

		for (int i = 0; n > 0; n /= BUCKET_LIMIT)	{
			length ++;
			content[i ++] = n % BUCKET_LIMIT;
		}
	}
	memset(content + length, 0, (MAX - length) * sizeof(long long));
}

BigInt :: BigInt (string n)	{
	length = 0;
		int i, posFirstDigit;
		stringstream s;
        sign = 1;
        posFirstDigit = 0;
		for (i = n.size() - BUCKET_NUM_DIGITS; i >= posFirstDigit; i -= 9)	{

			s << n.substr(i, BUCKET_NUM_DIGITS);
			s >> content[length ++];
			s.clear();
		}
		if (i < posFirstDigit)	{
			s << n.substr(posFirstDigit, BUCKET_NUM_DIGITS - posFirstDigit + i);
			s >> content[length ++];
		}
		memset(content + length, 0, (MAX - length) * sizeof(long long));
}

BigInt :: BigInt (const BigInt &n)	{
	length = n.length;
	sign = n.sign;
	memcpy(content, n.content, MAX * sizeof(long long));
}

void BigInt :: addLSBucket (int numBucketsToBeAdded)	{

	if (length + numBucketsToBeAdded > MAX)	return;

	for (int i = length + numBucketsToBeAdded -1; i >= 0; i --)	{
		content[i] = (i > numBucketsToBeAdded - 1) ? content[i - numBucketsToBeAdded] : 0;
	}
	length += numBucketsToBeAdded;
}

string BigInt :: toString(void)	{
	if (length == 0)	return "0";

	stringstream s;

	if (sign == -1)	s << "-";

	s << content[length - 1];

	for (int i = length - 2; i >= 0; i --)	{
		if (content[i] < 10)	{
			s << "00000000" << content[i];
		}
		else if (content[i] < 100)	{
			s << "0000000" << content[i];
		}
		else if (content[i] < 1000)	{
			s << "000000" << content[i];
		}
		else if (content[i] < 10000)	{
			s << "00000" << content[i];
		}
		else if (content[i] < 100000)	{
			s << "0000" << content[i];
		}
		else if (content[i] < 1000000)	{
			s << "000" << content[i];
		}
		else if (content[i] < 10000000)	{
			s << "00" << content[i];
		}
		else if (content[i] < 100000000)	{
			s << "0" << content[i];
		}
		else	{
			s << content[i];
		}
	}
	return s.str();
}

BigInt BigInt :: operator = (BigInt n)	{
	sign = n.sign;
	length = n.length;
	memcpy(content, n.content, sizeof(content));
}

bool BigInt :: operator == (BigInt n)	{
	if (sign != n.sign)	{
		return false;
	}
	else if (length != n.length)	{
		return false;
	}
	else	{
		for (int i = 0; i < length; i ++)	{
			if (content[i] != n.content[i])	return false;
		}
		return true;
	}
}

bool BigInt :: operator != (BigInt n)	{
	return !operator == (n);
}

bool BigInt :: operator < (BigInt n)	{
	if (sign < n.sign)	{
		return true;
	}
	else if (sign > n.sign)	{
		return false;
	}
	else if (sign == 0)	{
		return false;
	}
	else if (sign == 1 && length < n.length)	{
		return true;
	}
	else if (sign == 1 && length > n.length)	{
		return false;
	}
	else if (sign == 1 && length == n.length)	{
		for (int i = 0; i < length; i ++)	{
			if (content[i] < n.content[i])	{
				return true;
			}
			else if (content[i] > n.content[i])	{
				return false;
			}
		}
		return false;
	}
	else if (sign == -1 && length < n.length)	{
		return false;
	}
	else if (sign == -1 && length > n.length)	{
		return true;
	}
	else if (sign == -1 && length == n.length)	{
		for (int i = 0; i < length; i ++)	{
			if (content[i] < n.content[i])	{
				return false;
			}
			else if (content[i] > n.content[i])	{
				return true;
			}
		}
		return false;
	}
}

bool BigInt :: operator <= (BigInt n)	{
	return (operator < (n) || operator == (n));
}

bool BigInt :: operator > (BigInt n)	{
	return !operator <= (n);
}

bool BigInt :: operator >= (BigInt n)	{
	return !operator < (n);
}

BigInt BigInt :: operator + (BigInt n)	{

	if (length == 0)	{
		return n;
	}
	else if (n.length == 0)	{
		BigInt num(*this);
		return num;
	}
	else if (sign == n.sign)	{
		BigInt num;
		num.length = (length > n.length) ? length : n.length;
		num.sign = sign;

		long long bucketSum, carry = 0;

		for (int i = 0; i < num.length; i ++)	{
			bucketSum = content[i] + n.content[i] + carry;
			num.content[i] = bucketSum % BUCKET_LIMIT;
			carry = bucketSum / BUCKET_LIMIT;
		}
		if (carry > 0)	{
			num.content[length ++] = carry;
		}
		return num;
	}
	else	{
		BigInt num;
		if (sign == -1)	{
			num = (*this);
			num.sign = 1;
			return n - num;
		}
		else	{
			num = n;
			num.sign = 1;
			return (*this) - num;
		}
	}
}

BigInt BigInt :: operator + (long long n)	{
	return (*this) + BigInt(n);
}

BigInt BigInt :: operator - (BigInt n)	{

	if (sign == n.sign)	{
		bool hasZeroValue = true;

		if (length == 0)	{
			BigInt subtrahend(n);
			subtrahend.sign *= -1;
		}
		else if (n.length == 0)	{
			BigInt num(*this);
			return num;
		}
		if (*this > n)	{
			BigInt minuend(*this);

			for (int i = 0; i < minuend.length; i ++)	{
				if (minuend.content[i] >= n.content[i])	{
					minuend.content[i] -= n.content[i];
				}
				else	{
					minuend.content[i] = 10 * minuend.content[i] - n.content[i];
					minuend.content[i + 1] --;
				}
				if (hasZeroValue && minuend.content[i] != 0)	hasZeroValue = false;
			}
			return hasZeroValue ? BigInt(0) : minuend;
		}
		else	{
			BigInt minuend(n);
			for (int i = 0; i < minuend.length; i ++)	{
				if (minuend.content[i] >= content[i])	{
					minuend.content[i] -= content[i];
				}
				else	{
					minuend.content[i] = 10 * n.content[i] - content[i];
					minuend.content[i + 1] --;
				}
				if (hasZeroValue && minuend.content[i] != 0)	hasZeroValue = false;
			}
			if (hasZeroValue)	{
				return BigInt(0);
			}
			else	{
				minuend.sign *= -1;
				return minuend;
			}
		}
	}
	else	{
		BigInt subtrahend(n);
		if (n.sign = -1)	{
			subtrahend.sign = 1;
		}
		else	{
			subtrahend.sign = -1;
		}
		return operator + (subtrahend);
	}
}

BigInt BigInt :: operator - (long long n)	{
	return (*this) - BigInt(n);
}

BigInt BigInt :: operator * (long long n)	{
	if (n == 0 || length == 0)	return BigInt(0);

	long long carry = 0, tempProduct;
	BigInt num(*this);
	num.sign = ((n > 0 && sign == 1) || (n < 0 && sign == -1)) ? 1 : -1;

	if (n < 0)	n *= -1;

	for (int i = 0; i < length; i ++)	{
		tempProduct = num.content[i] * n;
		num.content[i] = (tempProduct + carry) % BUCKET_LIMIT;
		carry = (tempProduct + carry) / BUCKET_LIMIT;
	}

	if (carry > 0)	num.content[num.length ++] = carry;
	return num;
}

BigInt BigInt :: operator * (BigInt n)	{
	BigInt rs, temp;
	rs = n * content[0];

	for (int i = 1; i < length; i ++)	{
		temp = n * content[i];
		temp.addLSBucket(i);
		rs = rs + temp;
	}
	rs.sign = (sign == n.sign) ? 1 : -1;
	return rs;
}

void BigInt :: debug (void)	{
	cout << endl << "--------------------------------------------------" << endl;
	cout << "In debug mode" << endl;
	cout << "Number: " << toString() << endl;
	cout << "Sign: " << sign << "\tLength: " << length << endl;
	cout << "Content: ";
	for (int i = 0; i < MAX; i ++)	{
		cout << content[i] << "  ";
	}
	cout << endl << "--------------------------------------------------" << endl;
}
/*

int main ()
{




   using namespace std;

        int phi (int n) {//функция эйлера
            int result = n;
            for (int i=2; i*i<=n; i++)
                if (n % i == 0) {
                    while (n % i == 0)
                        n /= i;
                    result -= result / i;
                }
            if (n > 1)
                result -= result / n;
            return result;
        }

        long long int step (long long int a, int k,int n) {
                 int temp = a % n;
                    for (int i = 1; i < k; i++)
                        a = (a * temp) % n ;
                    return a;
             }//возведдение в степень


    char* DectoBin(int dec) {
    int counter = 0;
    int x =0;
    while (dec>=x) {
        counter++;
        x = pow(2, counter);
    }
    //counter is the # of bits in the converted binary number
    char* bin = new char[counter+1];
    //+1 for nul byte
    int y = counter;
    int remainder = 0;

    while (counter > 0) {
        //% the dec number with the base 2 each time and if remainder>0 then set the bit
        remainder = dec % 2;
        dec /= 2;
        if (counter == y) {
            bin[counter] = '\0';
        }

        if (remainder > 0) {
            bin[(counter - 1)] = '1';
        }
        else {
            bin[(counter - 1)] = '0';
        }
        counter--;
    }
    cout << " dec = " << bin << "  ";
    return bin;
}

    Bigint binpow (Bigint a, int n) {
      if (n == 0) return 1;
      if (n % 2 == 1) return binpow (a, n-1) * a;
       else {
         int b = binpow (a, n/2);
         return b * b;
      }
    }


        long long int extended_euclid(int b, long long int a){//функция нахождения секретной экспоненты
        int y;
        int e = b;
        int n = a;
        if ((a + 1) % b == 0)
            y = (a + 1) / b;
        else {
            int x;
            int q, r, x1, x2, y1, y2;
            x2 = 1;
            x1 = 0;
            y2 = 0;
            y1 = 1;
            while (b != 0){
                q = a / b;
                r = a - q * b;
                x = x2 - q * x1;
                y = y2 - q * y1;
                a = b;
                b = r;
                x2 = x1;
                x1 = x;
                y2 = y1;
                y1 = y;
            }
            y = y2;
        }
        if (y < 0)
            y = n + y;
        return y;
    }*/

        void CharToBool(char* ar, bool* a){ //перевод символов в двоичный код
            int binary = 0, j = 0, c;

            for (int i = 0; ar[i] != '\0'; i++ ){
                  c = ar[i];
                  for (int power = 7; power + 1; power-- )

                      if( c >= (1 << power) ){
                        c -= (1 << power);
                        a[j] = 1;
                        j++;
                      }
                      else{
                        a[j] = 0;
                        j++;
                      }
           }
    }
/*

    int counts (int n){//функция подсчета количества разрядов в числе
    int count = 1;
    while (n = n / 10)
        count++;
    return count;
}


    BigInt binarytodec(bool* mass, BigInt, int size){ ???????????????????????????????????
        cout << endl;
        Bigint k = "2";
        k = binpow(k, size);
        int count = 0;
        BigInt A[k];//массив содержащий строки степеней двойки
        BigInt B(0);// массив содержащий сумму степеней двойки
        int f = 0;
        for (int i = 0; i < size; i++){
            if(mass[i] == true)
                A[i] = binpow(2, i);
                B += A[i];
        }
        while(B)
            count++;
        BigInt C(binpow(count, 10));
        B = C + B;
        return B;
    }*/

    int symbolsinchararray(char* ar){
        int size = 0;
        for (int i = 0; ar[i] != '\0'; i++)
        size++;
        return size;
    }

    int main(){

    char ar[] = "qwertyq";
    int size = symbolsinchararray(ar); //подсчет количества символов в char-массиве без учета '/0'

    cout << endl << " Char-array is:  "; // вывод исходной строки
        for (int i = 0; i < size; i++)
            cout << ar[i];
    cout << endl << endl << " Size of char-array = "<< size << endl;

    bool ff [size*8];

    int s = size*8; //s - количество символов в бинарном массиве
    bool a[s]; // бинарный массив

    CharToBool(ar, a);

    cout << endl << endl << " Your bool-array is: ";
        for (int i = 0; i < s; i++)
            cout << a[i];
    cout << endl << " Size of bool-array = " << s << endl;


    srand(time(NULL));
    int grouppes = rand() % 50; // количество групп элементов (что оптимальнее много маленьких групп или мало больших?) - не больше чем кол-во символов в массиве

    if (grouppes == 0){
        cout << endl << endl << " Error (can't divide into grouppes)" << endl;
        return 0;
    }

    long long int everyone [grouppes]; // массив содержащий кол-во элементов  в каждой группе
    int kol = s; // переменная, определяющая сколько элементов осталось распределить
    int middle = s/grouppes; // переменная, содержащая информацию о среднем количестве символов в каждой группе для оптимального распределения
        for (int i = 0; i < grouppes - 1 ; i++){ // цикл, определяющий количество элементов в группе

            if(kol >= 0){
                everyone[i] = rand()%(middle +5);
                kol -= everyone [i];
            }
            else
                grouppes = i;
        }

        if (kol >= 0)
            everyone [grouppes - 1] = kol;
        else
            everyone [grouppes - 1] = 0;

    cout <<endl << endl<< " The number of grouppes: "  << grouppes;
    cout << endl << " Grouppes: ";
    for (int i = 0; i < grouppes; i++)
        cout << everyone[i] << " ";
    cout << endl << endl;
    BigInt A[grouppes]; //массив, содержащий элементы по группам
    int z = 0;
    for (int i = 0; i < grouppes; i++){
            char newmas[everyone [i]];
            for(int j = 0; j < everyone[i]; j++){
                if(a[j+z] == true)
                    newmas[j] = '1';
                else
                    newmas[j] = '0';
                cout << newmas[j];
            }
        BigInt temp(newmas);
        cout << endl << "  "<< temp.toString();
        A[i] = temp;
        z += everyone[i];
        cout << endl;

    }
    /*

    int p,q;
    cout << "Enter p,q "; //простые числа
    cin >> p >> q;

    long int n = p*q; //n сложно подобрать
    long int func = (p-1) * (q-1);  //функция Эйлера (подсчет взаимно простых чисел с n), должна быть больше, чем само вводимое число

    cout << "Enter public exponent " << '1' << " < e < " << func;
    int e;
    cin >> e; //е-открытая экспонента- простое + взаимно простое с ф.Эйлера (например из  чисел ферма)

    long int x,y,d;
    x = extended_euclid(e,func);
    cout << "Public key {" << e << "," << n << "}" << endl;
    cout << "Private key {" << x << "," << n << "}" << endl << endl;

    long int c [size];
    for (int i = 0; i < size; i++)  //шифровка
            c[i]= step (arr[i], e,n);
    //какая-то функция которая по мере деления числа будет переводить число 1. в бинарный вид, а потом в символьный массив


    cout << endl;

    long int k[size];
    for (int i = 0; i < size; i++) //дешифровка
            k[i]= step (c[i], x, n);
    //какая-то функция которая по мере деления числа будет переводить число 1. в бинарный вид, а потом в символьный массив

    return 0;
    }


    /*int step (int a, int n) {
	int res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
	}
	return res;
}

        int step(int a ,int x, int p){
            int i = 0;
            cout << " a = " << a << endl;
            cout << " x = " << x << endl;
            cout << " p = " << p << endl;
            int x10[1000];
            while(x >= 1){
                x10[i] = x % 2;
                x /= 2;
                i++;
            }
            int n = i;
            int x2[n];
            for (int j = 0; j < n; j++){
                x2[j] = x10[j];
                cout << x2[j];
            }
            cout << endl;
            int *arr = new int[n]; // массив значений
            arr[0] = a;
            cout << arr[0] << " "; // 1 элемент
            for(int i = 1; i < n; i++ ) {
                arr[i] = (arr[i-1] * arr[i-1]) % p;
                cout << arr[i] << " ";
            }
            int proizv = 1;
            for(int j = 0, i = n - 1; j < n, i >=0 ; j++, i--) {
                if (x2[i] == 1){
                    proizv = (proizv * x2[i] * arr[j])%p ;
                    cout << " proizv = " << proizv << endl;
                }
                else{
                    proizv = (proizv * 1 * arr[j]) % p;
                    cout << " proizv = " << proizv << endl;
                }
            }
            int y = proizv % p;
            delete [] x2;
            delete [] arr;
            return y;
        }

	BigInt a("9999999999123456789123456"), b("12345678912"), c;
	cout << (a - 12345678912).toString() << endl;
	c = a + b;
	cout << a.toString() + " + " + b.toString() + " = " + c.toString() << endl;
	c = a - b;
	cout << a.toString() + " - " + b.toString() + " = " + c.toString() << endl;
	c = a * b;
	cout << a.toString() + " * " + b.toString() + " = " + c.toString() << endl;

	if (a == b)	{
		cout << a.toString() + " is equal to " + b.toString() << endl;
	}
	else	{
		cout << a.toString() + " is not equal to " + b.toString() << endl;
	}

	if (a > b)	{
		cout << a.toString() + " is greater than " + b.toString() << endl;
	}
	else	{
		cout << a.toString() + " is not greater than " + b.toString() << endl;
	}*/
	return 0;
}




    /*cout << " Enter size of: ";
    int ss;
    cin >> ss;
    char ar[ss];
    cout << " enter your sms: ";
    cin >> ar;*/
